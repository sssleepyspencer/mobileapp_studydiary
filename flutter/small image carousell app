//small image carousell app
void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Carousel',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const ImageCarouselPage(),
    );
  }
}

class ImageCarouselPage extends StatefulWidget {
  const ImageCarouselPage({super.key});

  @override
  State<ImageCarouselPage> createState() => _ImageCarouselPageState();
}

class _ImageCarouselPageState extends State<ImageCarouselPage> {
  // List of image assets using the correct path from your folder structure
  final List<String> imageAssets = [
    'assets/avatar1.PNG',
    'assets/avatar2.PNG',
    'assets/avatar3.png',
    'assets/avatar4.PNG',
    'assets/avatar5.PNG',
  ];

  // Current index of displayed image
  int currentIndex = 0;

  // Move to previous image
  void previousImage() {
    setState(() {
      if (currentIndex > 0) {
        currentIndex--;
      } else {
        // Wrap around to the last image
        currentIndex = imageAssets.length - 1;
      }
    });
  }

  // Move to next image
  void nextImage() {
    setState(() {
      if (currentIndex < imageAssets.length - 1) {
        currentIndex++;
      } else {
        // Wrap around to the first image
        currentIndex = 0;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Image Carousel')),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Display current image
          Expanded(
            child: Container(
              margin: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.black12,
                border: Border.all(color: Colors.grey),
                borderRadius: BorderRadius.circular(10),
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: Image.asset(
                  imageAssets[currentIndex],
                  fit: BoxFit.contain,
                ),
              ),
            ),
          ),

          // Navigation buttons
          Padding(
            padding: const EdgeInsets.all(20),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // Previous button
                ElevatedButton(
                  onPressed: previousImage,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.lightBlue,
                    padding: const EdgeInsets.symmetric(
                      horizontal: 30,
                      vertical: 15,
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  child: const Text(
                    '<',
                    style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                  ),
                ),

                const SizedBox(width: 30),

                // Next button
                ElevatedButton(
                  onPressed: nextImage,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.lightBlue,
                    padding: const EdgeInsets.symmetric(
                      horizontal: 30,
                      vertical: 15,
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  child: const Text(
                    '>',
                    style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                  ),
                ),
              ],
            ),
          ),

          // Image counter indicator
          Padding(
            padding: const EdgeInsets.only(bottom: 20),
            child: Text(
              'Image ${currentIndex + 1} of ${imageAssets.length}',
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
          ),
        ],
      ),
    );
  }
}
