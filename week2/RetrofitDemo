package com.example.myapplication
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Button
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.OutlinedCard
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.lifecycle.viewmodel.compose.viewModel
import kotlinx.coroutines.cancel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.create
import retrofit2.http.GET

//Remember to add retrofit and gson dependencies in app/build.gradle file


//conversion will be done by Gson lib,which we included in the project
//this is data model,UI shows posts
data class Post(
    val userId: Int,
    val id: Int,
    val title: String,
    val body: String
)

//define the API service interface for retrofit
interface ApiService {
    //get all posts from the server
    @GET("posts")
    suspend fun getPosts(): List<Post>
    //get a post by id\
    @GET("posts/{id}")
    suspend fun getPostsById(id : Int): Post

}

//setup retrofit
object RetrofitInstance {
    private const val BASE_URL = "https://jsonplaceholder.typicode.com/"
    fun getApiService() : ApiService {
        return Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(ApiService::class.java)
    }
}

@Composable
fun PostDisplay(viewModel: PostViewModel = viewModel()) {
    val posts by viewModel.posts.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    //conditional redering depending on if it is loading or not
    //show a loading indicator if it's loading,the list if loading is ready


    if( isLoading) {
        CircularProgressIndicator( Modifier.fillMaxSize())

    }
    else if( errorMessage != null) {
        Text(errorMessage!!, fontSize = 20.sp, color = Color.Red, modifier = Modifier.padding(16.dp))
    }


    else {
        //add refresh
        Column (modifier = Modifier.padding(16.dp).fillMaxSize()){
            Text("Posts", fontSize = 30.sp, fontWeight = FontWeight.Bold, color = Color.Blue )
            Button(onClick = { viewModel.fetchPosts() }) {
                Text("Refresh")
            }

            LazyColumn {
                items(posts) { post ->
                    PostItem(post)

                }
        }


    }

    }
}


@Composable
fun PostItem(post:Post){
    OutlinedCard(
        modifier = Modifier.fillMaxWidth()
            .padding( horizontal = 16.dp, vertical = 8.dp)

    ) {
        Column( modifier = Modifier.padding( 16.dp)) {
            Text( text = post.title, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Blue)
            Text( text = post.body, color = Color.Gray)
        }
    }
}

class PostViewModel : ViewModel() {
    private val _posts= MutableStateFlow<List<Post>>(emptyList())
    val posts: StateFlow<List<Post>> = _posts

    //add a state boolean isLoading
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading


    //error message to the uI
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage

    init {
        fetchPosts()
    }

    fun fetchPosts(){
        //posts must be fetched in a coroutine (outside the main thread)
        viewModelScope.launch {
            try {
                _isLoading.value = true
                val posts = RetrofitInstance.getApiService().getPosts()

                delay(2000)
                _posts.value = posts
            }
            catch (e:Exception) {
                _posts.value = emptyList()
                _errorMessage.value = "Error: ${e.message}"
            }
            finally {
                _isLoading.value = false
            }

        }


    }



}
