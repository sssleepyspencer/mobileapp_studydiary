package com.example.myapplication

import androidx.compose.foundation.combinedClickable
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.OutlinedCard
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.PointerIcon.Companion.Text
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

data class Restaurant (
    val name: String,
    val address: String,
    val rating: Double,
    val cuisine: String

)
val restaurantList = listOf(
    Restaurant("The Gourmet Kitchen", "123 Food St.", 4.5, "Italian"),
    Restaurant("Sushi World", "456 Sushi Ave.", 4.8, "Japanese"),
    Restaurant("Taco Paradise", "789 Taco Blvd.", 4.2, "Mexican"),
    Restaurant("Burger Heaven", "321 Burger Ln.", 4.0, "American"),
    Restaurant("Pasta House", "147 Noodle St.", 4.3, "Italian"),
    Restaurant("Spicy Curry Palace", "852 Spice Rd.", 4.7, "Indian"),
    Restaurant("Le Petit Bistro", "963 French St.", 4.6, "French"),
    Restaurant("Wok 'n' Roll", "258 Noodle Ave.", 4.1, "Chinese"),
    Restaurant("Pizza Planet", "159 Slice Blvd.", 3.9, "Italian"),
    Restaurant("The BBQ Shack", "753 Grill Ln.", 4.4, "American"),
    Restaurant("Ramen Kingdom", "357 Ramen St.", 4.9, "Japanese"),
    Restaurant("Caf√© Mocha", "123 Coffee Rd.", 4.0, "Cafe"),
    Restaurant("Viva la Vegan", "456 Green St.", 4.6, "Vegan"),
    Restaurant("El Toro Loco", "789 Fiesta Ave.", 4.3, "Mexican"),
    Restaurant("Dim Sum Delight", "159 Dumpling Ln.", 4.5, "Chinese"),
    Restaurant("The Greek Taverna", "258 Olive St.", 4.7, "Greek"),
    Restaurant("Kebab Palace", "963 Spice St.", 4.3, "Middle Eastern"),
    Restaurant("The Hot Pot Spot", "654 Boil Ave.", 4.2, "Chinese"),
    Restaurant("Falafel Corner", "321 Vegan Blvd.", 4.0, "Middle Eastern"),
    Restaurant("Seaside Sushi", "753 Ocean Ave.", 4.8, "Japanese"),
    Restaurant("The Taco Stand", "987 Fiesta St.", 3.8, "Mexican"),
    Restaurant("Steakhouse Supreme", "654 Meat Ln.", 4.9, "American"),
    Restaurant("Pho Haven", "258 Soup Ave.", 4.4, "Vietnamese"),
    Restaurant("The Sushi Spot", "951 Fish Blvd.", 4.2, "Japanese"),
    Restaurant("The Vegan Joint", "753 Plant Ave.", 4.7, "Vegan")
);



@Composable
fun RestaurantScreen() {
    var searchText by remember { mutableStateOf("") }
    val filteredRestaurant = remember (searchText) {
        restaurantList.filter {
            it.name.contains(searchText, ignoreCase = true)
        }
    }
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        TextField(
            value = searchText,
            onValueChange = { searchText = it},
            label = { Text("Search Restaurants")},
            modifier = Modifier.fillMaxWidth())
        RestaurantList( filteredRestaurant )

    }

}

@Composable
fun RestaurantList (restaurants : List<Restaurant>) {
    LazyColumn(
        modifier = Modifier.fillMaxSize()
    ) {
        items( restaurants ) { restaurant ->
            RestaurantListItem( restaurant)
        }

    }

}

@Composable
fun RestaurantListItem( restaurant : Restaurant) {
    OutlinedCard(
        modifier = Modifier.fillMaxWidth()
            .padding( horizontal = 16.dp, vertical = 8.dp)

    ) {
        Column( modifier = Modifier.padding( 16.dp)) {
            Text( text = restaurant.name, fontSize = 20.sp, fontWeight = FontWeight.Bold, color = Color.Blue)
            Text( text = restaurant.address, color = Color.Gray)
        }
    }

}
